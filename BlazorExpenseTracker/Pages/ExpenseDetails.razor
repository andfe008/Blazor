@page "/expensedetails"
@using Model
@using Interfaces
@inject ICategoryServices categoryservice
@inject IExpenseService expenseServices
@inject IJSRuntime JsRuntime


<EditForm Model="@expense" OnValidSubmit="SaveExpenses">
    <DataAnnotationsValidator />
    <table class="table">
        <tr>
            <td>
                Amount:
            </td>
            <td>
                <InputNumber @bind-Value="@expense.Amount"></InputNumber>
                <ValidationMessage For="@(()=> expense.Amount)" />
            </td>
        </tr>
        <tr>
            <td>Transaction Date:</td>
            <td>
                <InputDate @bind-Value="@expense.TransactionDate"></InputDate>
                <ValidationMessage For="@(()=> expense.TransactionDate)" />
            </td>
        </tr>
        <tr>
            <td>
                Category:
            </td>
            <td>
                <InputSelect @bind-Value="@expense.CategoryId">
                    @foreach (Category item in categories)
                    {
                        <option value="@item.Id"> @item.Name</option>
                    }
                </InputSelect>
            </td>
        </tr>
        <tr>
            <td>Expense Type:</td>
            <td>
                <InputSelect disabled="true" @bind-Value="expense.ExpenseType">
                    <option value="@(ExpenseType.Incote)">Incode</option>
                    <option value="@(ExpenseType.Expens)">Expense</option>
                </InputSelect>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="text-align:center">
                <input type="submit" class="btn-success" value="@(expense.Id == 0 ? "Save" : "Update" )" />
                <input type="button" class="btn-secondary" value="Cancel" style="@GetCancelBottonStyle()"
                       @onclick="Cancel" />
                <input type="button" class="btn-danger" value="Delete" @onclick="(()=>Delete(expense.Id))" style="@GetCancelBottonStyle()" />

            </td>

        </tr>
    </table>

</EditForm>



@code {
    [CascadingParameter] protected Expense expense { get; set; }// se usa para el actualizar el valor por medio de componentes

    // private Expense expense = new Expense();
    private IEnumerable<Category> categories = new List<Category>();

    [Parameter]
    public ExpenseType ExpenseType { get; set; }

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryservice.GetAllCategories();
        if (expense.Id == 0)
        {
            expense.CategoryId = categories.FirstOrDefault().Id;
            expense.ExpenseType = ExpenseType;
        }
    }

    protected async Task SaveExpenses()
    {
        await expenseServices.SaveExpense(expense);
        ClearExpense();
        expense.SelectedExpenseChanged(expense);
    }


    protected string GetCancelBottonStyle()
    {
        return expense.Id == 0 ? "display:none" : "";
    }

    public void Cancel()
    {
        ClearExpense();
    }

    public void ClearExpense()
    {
        expense.Id = 0;
        expense.Amount = 0;
        expense.TransactionDate = DateTime.MinValue;
        expense.CategoryId = categories.FirstOrDefault().Id;
        expense.ExpenseType = ExpenseType;
    }

    public async Task Delete(int expenseid)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure");
        if (confirmed && expenseid > 0)
        {
            await expenseServices.DeleteExpense(expenseid);
            ClearExpense();
            expense.SelectedExpenseChanged(expense);
        }
    }



}
